diff --git a/node_modules/react-native-flip-card/lib/FlipCard.js b/node_modules/react-native-flip-card/lib/FlipCard.js
index c496da7..46a2bc3 100644
--- a/node_modules/react-native-flip-card/lib/FlipCard.js
+++ b/node_modules/react-native-flip-card/lib/FlipCard.js
@@ -18,7 +18,7 @@ export default class FlipCard extends Component {
     style: ViewPropTypes.style
   }
 
-  constructor (props) {
+  constructor(props) {
     super(props)
 
     // set reversed boolean for detect other side size
@@ -35,41 +35,42 @@ export default class FlipCard extends Component {
       back: { width: 0, height: 0 }
     }
   }
-  static getDerivedStateFromProps (nextProps, prevState) {
+  static getDerivedStateFromProps(nextProps, prevState) {
     if (prevState.isFlipped !== nextProps.flip) {
       return { flip: nextProps.flip }
     } else return null
   }
-  componentDidUpdate (prevProps) {
+  componentDidUpdate(prevProps) {
     if (prevProps.flip !== this.props.flip) {
       this._toggleCard()
     }
   }
-  _toggleCard () {
-    this.setState({isFlipping: true})
+  _toggleCard() {
+    this.setState({ isFlipping: true })
     this.props.onFlipStart(this.state.isFlipped)
     this._animation(!this.state.isFlipped)
   }
-  _animation (isFlipped) {
+  _animation(isFlipped) {
     if (!this.timer) {
       this.timer = setTimeout(() => {
-        this.setState({isFlipped: !this.state.isFlipped})
+        this.setState({ isFlipped: !this.state.isFlipped })
         this.timer = null
       }, 120)
     }
-    Animated.spring(this.state.rotate,
-     {
+    Animated.timing(this.state.rotate,
+      {
         toValue: Number(isFlipped),
-        friction: this.props.friction,
+        // friction: this.props.friction,
+        duration: 500,
         useNativeDriver: this.props.useNativeDriver
       }
     ).start((param) => {
-      this.setState({isFlipping: false})
+      this.setState({ isFlipping: false })
       this.props.onFlipEnd(this.state.isFlipped)
     })
   }
 
-  componentDidMount () {
+  componentDidMount() {
     if (this.props.alignHeight || this.props.alignWidth) {
       // need to check the other side width or height or both
       this.measureOtherSideTimeout = setTimeout(this.measureOtherSide.bind(this), 32);
@@ -80,53 +81,57 @@ export default class FlipCard extends Component {
     clearTimeout(this.measureOtherSideTimeout);
   }
 
-  measureOtherSide () {
+  measureOtherSide() {
     this.setState({
       isFlipped: !this.state.isFlipped,
       mesured: true
     })
   }
 
-  render () {
+  render() {
     var c = this.props.children;
     var transform = this.props.perspective ? [{ perspective: this.props.perspective }] : []
     var render_side = false
 
     if (this.props.flipHorizontal) {
       transform.push(
-        {rotateY: this.state.rotate.interpolate({
-          inputRange: [0, 1],
-          outputRange: [ '0deg', '180deg' ]
-        })}
+        {
+          rotateY: this.state.rotate.interpolate({
+            inputRange: [0, 1],
+            outputRange: ['0deg', '180deg']
+          })
+        }
       )
     }
 
     if (this.props.flipVertical) {
       transform.push(
-        {rotateX: this.state.rotate.interpolate({
-          inputRange: [0, 1],
-          outputRange: [ '0deg', '180deg' ]
-        })}
+        {
+          rotateX: this.state.rotate.interpolate({
+            inputRange: [0, 1],
+            outputRange: ['0deg', '180deg']
+          })
+        }
       )
     }
 
     if (this.state.isFlipped) {
       render_side = (
         <Back
-          style={[ this.state.height > 0 && {height: this.state.height}, this.state.width > 0 && {width: this.state.width}]}
+          style={[this.state.height > 0 && { height: this.state.height }, this.state.width > 0 && { width: this.state.width }]}
           flipHorizontal={this.props.flipHorizontal}
           flipVertical={this.props.flipVertical}
           perspective={this.props.perspective}
           onLayout={(event) => {
-            var {x, y, width, height} = event.nativeEvent.layout
-            var _update = Object.assign(this.state.back, {width: width, height: height})
-            this.setState({back: _update})
+            var { x, y, width, height } = event.nativeEvent.layout
+            var _update = Object.assign(this.state.back, { width: width, height: height })
+            this.setState({ back: _update })
             if (this.state.mesured) {
               if (this.props.alignHeight) {
-                this.setState({height: Math.max(this.state.face.height, this.state.back.height)})
+                this.setState({ height: Math.max(this.state.face.height, this.state.back.height) })
               }
               if (this.props.alignWidth) {
-                this.setState({width: Math.max(this.state.face.width, this.state.back.width)})
+                this.setState({ width: Math.max(this.state.face.width, this.state.back.width) })
               }
             }
           }}
@@ -137,17 +142,17 @@ export default class FlipCard extends Component {
     } else {
       render_side = (
         <Face
-          style={[ this.state.height > 0 && { height: this.state.height }, this.state.width > 0 && { width: this.state.width }]}
+          style={[this.state.height > 0 && { height: this.state.height }, this.state.width > 0 && { width: this.state.width }]}
           onLayout={(event) => {
-            var {x, y, width, height} = event.nativeEvent.layout;
-            var _update = Object.assign(this.state.face, {width: width, height: height})
-            this.setState({face: _update})
+            var { x, y, width, height } = event.nativeEvent.layout;
+            var _update = Object.assign(this.state.face, { width: width, height: height })
+            this.setState({ face: _update })
             if (this.state.mesured) {
               if (this.props.alignHeight) {
-                this.setState({height: Math.max(this.state.face.height, this.state.back.height)})
+                this.setState({ height: Math.max(this.state.face.height, this.state.back.height) })
               }
               if (this.props.alignWidth) {
-                this.setState({width: Math.max(this.state.face.width, this.state.back.width)})
+                this.setState({ width: Math.max(this.state.face.width, this.state.back.width) })
               }
             }
           }}
@@ -163,15 +168,15 @@ export default class FlipCard extends Component {
     //      https://github.com/facebook/react-native/issues/2103
     if (this.props.clickable) {
       let opacity = 0;
-      if ( ((this.props.alignHeight || this.props.alignWidth) && this.state.mesured) ||
-        !(this.props.alignHeight || this.props.alignWidth))  {
+      if (((this.props.alignHeight || this.props.alignWidth) && this.state.mesured) ||
+        !(this.props.alignHeight || this.props.alignWidth)) {
         // if you set alignXXX property, we show this side after mesured
         // Otherwise, it's showed immediately
         opacity = 1;
       }
-        return (
+      return (
         <TouchableOpacity
-          style={{flex:1}}
+          style={{ flex: 1 }}
           testID={this.props.testID}
           activeOpacity={1}
           onPress={() => { this._toggleCard(); }}
@@ -196,7 +201,7 @@ export default class FlipCard extends Component {
         <Animated.View
           {...this.props}
           style={[S.flipCard,
-          {transform: transform},
+          { transform: transform },
           this.props.style
           ]}
         >
@@ -218,7 +223,7 @@ FlipCard.propTypes = {
   alignHeight: PropTypes.bool,
   alignWidth: PropTypes.bool,
   useNativeDriver: PropTypes.bool,
-  children (props, propName, componentName) {
+  children(props, propName, componentName) {
     const prop = props[propName]
     if (React.Children.count(prop) !== 2) {
       return new Error(
@@ -238,8 +243,8 @@ FlipCard.defaultProps = {
   flipHorizontal: false,
   flipVertical: true,
   clickable: true,
-  onFlipEnd: () => {},
-  onFlipStart: () => {},
+  onFlipEnd: () => { },
+  onFlipStart: () => { },
   alignHeight: false,
   alignWidth: false,
   useNativeDriver: true,
@@ -247,7 +252,7 @@ FlipCard.defaultProps = {
 
 
 export class Face extends Component {
-  render () {
+  render() {
     return (
       <View
         style={[S.face, this.props.style]}
@@ -260,32 +265,32 @@ export class Face extends Component {
 }
 
 Face.propTypes = {
-  children (props, propName, componentName) {
+  children(props, propName, componentName) {
   }
 }
 
 export class Back extends Component {
-  render () {
+  render() {
     var transform = []
     if (this.props.flipHorizontal) {
-      transform.push({scaleX: -1})
+      transform.push({ scaleX: -1 })
       if (Platform.OS === "android") {
-        transform.push({perspective: this.props.perspective})
+        transform.push({ perspective: this.props.perspective })
       }
     }
     if (this.props.flipVertical) {
-      transform.push({scaleY: -1})
+      transform.push({ scaleY: -1 })
       if (Platform.OS === "android") {
-        transform.push({perspective: this.props.perspective})
+        transform.push({ perspective: this.props.perspective })
       }
     }
 
     return (
       <View
-      style={[
-        S.back,
-        this.props.style,
-        {transform: transform}
+        style={[
+          S.back,
+          this.props.style,
+          { transform: transform }
         ]}
         onLayout={this.props.onLayout}>
         {this.props.children}
@@ -304,6 +309,6 @@ Back.propTypes = {
   flipHorizontal: PropTypes.bool,
   flipVertical: PropTypes.bool,
   perspective: PropTypes.number,
-  children (props, propName, componentName) {
+  children(props, propName, componentName) {
   }
 }
