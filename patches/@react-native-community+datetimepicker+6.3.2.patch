diff --git a/node_modules/@react-native-community/datetimepicker/src/datetimepicker.ios.js b/node_modules/@react-native-community/datetimepicker/src/datetimepicker.ios.js
index fed4dfe..3b6cb0f 100644
--- a/node_modules/@react-native-community/datetimepicker/src/datetimepicker.ios.js
+++ b/node_modules/@react-native-community/datetimepicker/src/datetimepicker.ios.js
@@ -9,13 +9,14 @@
  * @format
  * @flow strict-local
  */
-import RNDateTimePicker from './picker';
-import {sharedPropsValidation, toMilliseconds} from './utils';
-import {IOS_DISPLAY, ANDROID_MODE, EVENT_TYPE_SET} from './constants';
+// import RNDateTimePicker from './picker';
+import RNDateTimePicker from 'react-native-datepicker'
+import { sharedPropsValidation, toMilliseconds } from './utils';
+import { IOS_DISPLAY, ANDROID_MODE, EVENT_TYPE_SET } from './constants';
 import invariant from 'invariant';
 import * as React from 'react';
-import {getPickerHeightStyle} from './layoutUtilsIOS';
-import {Platform, StyleSheet} from 'react-native';
+import { getPickerHeightStyle } from './layoutUtilsIOS';
+import { Platform, StyleSheet } from 'react-native';
 
 import type {
   NativeEventIOS,
@@ -24,7 +25,7 @@ import type {
   DatePickerOptions,
   IOSDisplay,
 } from './types';
-import type {DateTimePickerEvent} from './types';
+import type { DateTimePickerEvent } from './types';
 
 const getDisplaySafe = (display: IOSDisplay): IOSDisplay => {
   const majorVersionIOS = parseInt(Platform.Version, 10);
@@ -59,7 +60,7 @@ export default function Picker({
   display: providedDisplay = IOS_DISPLAY.default,
   disabled = false,
 }: IOSNativeProps): React.Node {
-  sharedPropsValidation({value});
+  sharedPropsValidation({ value });
 
   const [heightStyle, setHeightStyle] = React.useState(undefined);
   const _picker: NativeRef = React.useRef(null);
@@ -67,7 +68,7 @@ export default function Picker({
 
   React.useEffect(
     function ensureNativeIsInSyncWithJS() {
-      const {current} = _picker;
+      const { current } = _picker;
 
       if (value && onChange && current) {
         const timestamp = value.getTime();
@@ -95,7 +96,7 @@ export default function Picker({
   const _onChange = (event: NativeEventIOS) => {
     const timestamp = event.nativeEvent.timestamp;
     // $FlowFixMe Cannot assign object literal to `unifiedEvent` because number [1] is incompatible with undefined [2] in property `nativeEvent.timestamp`.
-    const unifiedEvent: DateTimePickerEvent = {...event, type: EVENT_TYPE_SET};
+    const unifiedEvent: DateTimePickerEvent = { ...event, type: EVENT_TYPE_SET };
 
     const date = timestamp !== undefined ? new Date(timestamp) : undefined;
 
@@ -109,7 +110,7 @@ export default function Picker({
     return null;
   }
 
-  const dates: DatePickerOptions = {value, maximumDate, minimumDate};
+  const dates: DatePickerOptions = { value, maximumDate, minimumDate };
   toMilliseconds(dates, 'value', 'minimumDate', 'maximumDate');
 
   return (
